name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
      - stable/*
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: openformulieren/open-forms-sdk

jobs:
  build:
    name: Create 'production' build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Extract version from git
        id: build-args
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          # PRs result in version 'merge' -> transform that into 'latest'
          [ "$VERSION" == "merge" ] && VERSION=latest

          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          npm ci
          npm run build:design-tokens

      - name: Run type checker
        run: npm run build:typecheck

      - name: Build Javascript
        run: |
          echo "Building version $VITE_VERSION"
          VITE_VERSION=${VITE_VERSION} npm run build
        env:
          VITE_VERSION: ${{ steps.build-args.outputs.version }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Store build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdk-build
          path: dist/
          retention-days: 1

  tests:
    name: Run Javascript tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          npm test -- --coverage
        env:
          CI: 'true'

      - name: Publish coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: vitest

  linting:
    name: Lint code (${{ matrix.tool.name }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        tool:
          - name: Prettier
            script: checkformat
          - name: ESLint
            script: lint

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.tool.name }} linter
        run: npm run ${{ matrix.tool.script }}

  i18n-check:
    name: Check i18n messages extracted
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Extract messages and check for changes
        run: |
          npm run makemessages
          ./bin/compilemessages.sh
          git diff --exit-code src/i18n/{compiled,messages}

      - name: Write failure markdown
        if: ${{ failure() }}
        run: |
          first_changed_file=$(git diff --name-only --diff-filter=M src/i18n/{compiled,messages} | head -n 1)
          first_lineno=$(git diff -U0 $first_changed_file | grep '^@@' | head -1 | sed -E 's/.*\+([0-9]+).*/\1/')
          echo "::error file=$first_changed_file,line=$first_lineno,title=Outdated::There are changes detected in the i18n messages"
          echo 'Please make sure to extract and compile messages locally commit the changes.' >> $GITHUB_STEP_SUMMARY
        shell: bash


  publish:
    name: Publish the NPM package
    runs-on: ubuntu-latest
    needs:
      - build
      - tests
      - linting
      - i18n-check

    # do not publish in forks or non-tag pushes
    if: startsWith(github.ref, 'refs/tags/') && github.repository_owner == 'open-formulieren'

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: npm
          registry-url: 'https://registry.npmjs.org'
          scope: '@open-formulieren'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: sdk-build
          path: dist/

      - name: Publish package to NPM
        run: |
          mv README.npm.md README.md
          npm run prepare-package

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          npm publish --access public --new-version=$VERSION
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker:
    name: Build (and push) Docker image
    runs-on: ubuntu-latest

    steps:
      # This will include the updated OAS (if updated) from the update-oas job.
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build the Docker image
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          docker build . \
          --build-arg SDK_VERSION=${RELEASE_VERSION} \
          --tag $IMAGE_NAME:$RELEASE_VERSION

      - name: Log into registry
        if: github.event_name == 'push' && github.repository_owner == 'open-formulieren' # Exclude PRs / forks
        run:
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }}
          --password-stdin

      - name: Push the Docker image
        if: github.event_name == 'push' && github.repository_owner == 'open-formulieren' # Exclude PRs / forks
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: docker push $IMAGE_NAME:$RELEASE_VERSION

  update-docker-readme:
    needs:
      - docker
    uses: ./.github/workflows/dockerhub-description.yml
    if: github.event_name == 'push' && github.repository_owner == 'open-formulieren' # Exclude PRs / forks
    with:
      image_name: openformulieren/open-forms-sdk
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
